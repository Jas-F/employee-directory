{"version":3,"sources":["components/Jumbo/Jumbo.js","components/Search/Search.js","components/Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbo","Jumbotron","fluid","Container","Search","props","Form","Group","Control","size","type","placeholder","onChange","e","val","target","value","setSearchInput","MyTable","state","employees","axios","get","then","res","data","results","setState","console","log","searchTerm","this","searchInput","dataToDisplay","slice","filter","item","JSON","stringify","includes","Table","striped","bordered","hover","variant","map","src","picture","thumbnail","name","first","last","phone","email","dob","date","React","Component","App","useState","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAoBeA,MAXf,WACI,OACJ,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAACC,EAAA,EAAD,WACI,oDACA,wE,gBCQOC,MAZf,SAAgBC,GACZ,OACJ,cAACC,EAAA,EAAKC,MAAN,UAEI,cAACD,EAAA,EAAKE,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAAOC,YAAY,SAASC,SAAW,SAACC,GACjE,IAAMC,EAAMD,EAAEE,OAAOC,MACrBX,EAAMY,eAAeH,S,iEC2FdI,E,kDAhFX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IACDc,MAAQ,CAETC,UAAW,IAJA,E,qDAWnB,WAAqB,IAAD,OAEhBC,IAAMC,IAAI,yCACLC,MAAK,SAAAC,GACF,IAAMJ,EAAYI,EAAIC,KAAKC,QAE3B,EAAKC,SAAS,CAAEP,UAAWA,IAC3BQ,QAAQC,IAAI,EAAKV,Y,oBAK7B,WAEI,IAAMW,EAAaC,KAAK1B,MAAM2B,YAE1BC,EAAgBF,KAAKZ,MAAMC,UAAUc,QAazC,OATIJ,IACAG,EAAgBA,EAAcE,QAAO,SAAAC,GAEjC,OADmBC,KAAKC,UAAUF,GAEnBG,SAAST,OAM5B,eAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAtC,UACI,gCAII,+BACI,uCACA,sCACA,uCACA,uCACA,0CAGR,gCAIQX,EAAcY,KAAI,SAAAT,GACd,OACI,+BAEI,6BAAI,qBAAKU,IAAKV,EAAKW,QAAQC,cAC3B,+BAAKZ,EAAKa,KAAKC,MAAf,IAAuBd,EAAKa,KAAKE,QACjC,6BAAKf,EAAKgB,QACV,6BAAKhB,EAAKiB,QACV,6BAAKjB,EAAKkB,IAAIC,sB,GApE5BC,IAAMC,WCWbC,MAbf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACN3B,EADM,KACOf,EADP,KAGb,OADAW,QAAQC,IAAIG,GAGV,cADA,CACA,OAAK4B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQ3C,eAAgBA,IACxB,cAAC,EAAD,CAASe,YAAaA,QCnBb6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5e77159.chunk.js","sourcesContent":["/* Import react */\r\nimport React from \"react\";\r\n\r\n/* Import css to style components */\r\nimport \"./jumbo.css\";\r\n\r\n// import bootstrap\r\nimport {Jumbotron, Container} from \"react-bootstrap\";\r\n// create function to return jumbo bootstrap\r\nfunction Jumbo() {\r\n    return (\r\n<Jumbotron fluid>\r\n    <Container>\r\n        <h1>Employee Directory</h1>\r\n        <h2>Search by name to filter results</h2>\r\n    </Container>\r\n</Jumbotron>\r\n    )\r\n} \r\n\r\nexport default Jumbo;","/* Import react */\r\nimport React from \"react\";\r\n/* Import css to style components */\r\nimport \"./search.css\"\r\n// import bootstrap from react\r\n// change rect bootstrap documentation \r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// add search form function\r\n// let search receive \r\nfunction Search(props) {\r\n    return (\r\n<Form.Group>\r\n    {/* create on change function that takes search input and sets it to the new state of search input */}\r\n    <Form.Control size=\"sm\" type=\"text\" placeholder=\"search\" onChange={ (e)=> {\r\n        const val = e.target.value\r\n        props.setSearchInput(val)\r\n    }}/>\r\n</Form.Group>\r\n    )\r\n}\r\n\r\nexport default Search;","/* Import react */\r\nimport React from \"react\";\r\n\r\n// import axios\r\nimport axios from 'axios';\r\n/* Import css to style components */\r\nimport \"./table.css\";\r\n\r\n// import bootstrap\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\n// create table function\r\n// change table function name to resolve name conflict\r\n\r\n// 2. Render random user api data into table\r\n// 2a. change component function myTable to class my table to add functionality ES6 allowing for render of table\r\n// 2b. set original state \r\n// 2c. Add componentDidMount to set new state with api data\r\n// 2d. Use render method to produce output\r\n// 2e. Render API Data into the table using this.state\r\n// 3 Make table sortable\r\n// 3a. Put td name inside of a button with an onlick functino\r\n// 3b. Create a new state for sorted field\r\n// 3c. make the state empty so it can be set when onlick function is triggered in button\r\n// 3d. Create if statement that will sort all names into ascending or descending order\r\nclass MyTable extends React.Component {\r\n    // set new state to employee with  the value of an empty array\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // use empty array\r\n            employees: [],\r\n        };\r\n    }\r\n\r\n\r\n    // git 25users with the nationality of us using get method\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(\"https://randomuser.me/api/?results=25\")\r\n            .then(res => {\r\n                const employees = res.data.results;\r\n                // set new state to value of employee with the loaded api\r\n                this.setState({ employees: employees })\r\n                console.log(this.state);\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        // get search input from props\r\n        const searchTerm = this.props.searchInput\r\n        // filter table bases off search term\r\n        let dataToDisplay = this.state.employees.slice()\r\n        // with copy of state create conditional if there is a search term \r\n        // json the data in order to search for characters that match the search input\r\n        // create if statement to sort data\r\n        if (searchTerm) {\r\n            dataToDisplay = dataToDisplay.filter(item => {\r\n                const jsonString = JSON.stringify(item)\r\n                return (\r\n                    jsonString.includes(searchTerm)\r\n                )\r\n            })\r\n        }\r\n        // grab data from state\r\n        return (\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    {/* create onclick for header\r\n                    Store the name as a var / state \r\n                     */}\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Name</th>\r\n                        <th>Phone</th>\r\n                        <th>Email</th>\r\n                        <th>DOB</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* map through employee array */}\r\n                    {\r\n                        // add data to display to filter data comming in\r\n                        dataToDisplay.map(item => {\r\n                            return (\r\n                                <tr>\r\n                                    {/* use dot notation to render image use img tag to display img */}\r\n                                    <td><img src={item.picture.thumbnail} ></img></td>\r\n                                    <td>{item.name.first} {item.name.last}</td>\r\n                                    <td>{item.phone}</td>\r\n                                    <td>{item.email}</td>\r\n                                    <td>{item.dob.date}</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </tbody>\r\n            </Table>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MyTable;","// 1. break up UI into components\n// 1a. build  jumbo component to display title and sub title\n// 1b. build  form component to search employee by name\n// 1c. build  table component to display employee data base\nimport React, { useState } from \"react\";\n// import react bootstrap for components\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// import jumbo component\nimport Jumbo from \"./components/Jumbo/Jumbo\";\n// // // import search component\nimport Search from \"./components/Search/Search.js\";\n// // // import table component\nimport MyTable from \"./components/Table/Table.js\";\n\n// 4. search\n// change state to search value input through call back function\n// pass search value to table \n// use search value as filter\n// pass value of new state to table\n\n// use use state to import search value\n// create react hook for search value\nfunction App() {\n  const [searchInput, setSearchInput] = useState(\"\")\n  console.log(searchInput)\n  return (\n    // display UI from components\n    <div className=\"App\">\n      <Jumbo />\n      <Search setSearchInput={setSearchInput} />\n      <MyTable searchInput={searchInput} />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}